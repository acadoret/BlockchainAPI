import json, enum
from datetime import datetime
from sqlalchemy.ext.declarative import DeclarativeMeta

from .. import db


class Contract(db.Model):
    __tablename__ = 'contracts'
    
    class state_enum(enum.Enum):
        in_progress = "in_progress"
        done = "done"
    
    address = db.Column(db.String(42), primary_key=True)
    state = db.Column(db.Enum(state_enum))
    name = db.Column(db.String(32))
    description = db.Column(db.String(512))
    end_date = db.Column(db.DateTime, nullable=False)
    registered_on = db.Column(db.DateTime, nullable=False)
    
    user_address = db.Column(db.ForeignKey('users.address'))
    user = db.relationship('User', foreign_keys=[user_address])
    
    # voter_ids = db.Column(db.String, db.ForeignKey('users.address'))
    """
    Not stored in DB
    """
# Abi contains a single .sol contract compiled in JSON
    _abi = json.loads('[{"constant":false,"inputs":[{"internalType":"uint256","name":"_candidateId","type":"uint256"}],"name":"vote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"candidatesCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"candidates","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"voteCount","type":"uint256"},{"internalType":"bool","name":"is_winning","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"_candidateId","type":"uint256"}],"name":"is_winner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"string","name":"_name","type":"string"}],"name":"addCandidate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"votersCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"voters","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getCandidatesCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"state","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"_candidateId","type":"uint256"}],"name":"votedEvent","type":"event"}]')


    # Bytecode contains the bytecode of a complied contract 
    _bytecode = '608060405234801561001057600080fd5b5060408051808201909152600a8082527f696e5f70726f676573730000000000000000000000000000000000000000000060209092019182526100559160009161005b565b506100f6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061009c57805160ff19168380011785556100c9565b828001600101855582156100c9579182015b828111156100c95782518255916020019190600101906100ae565b506100d59291506100d9565b5090565b6100f391905b808211156100d557600081556001016100df565b90565b610747806101056000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063462e91ec11610066578063462e91ec1461019957806398c079381461023f578063a3ec138d14610247578063bb9aa28f14610281578063c19d93fb1461028957610093565b80630121b93f146100985780632d35a8a2146100b75780633477ee2e146100d15780634148cdba1461017c575b600080fd5b6100b5600480360360208110156100ae57600080fd5b5035610306565b005b6100bf610417565b60408051918252519081900360200190f35b6100ee600480360360208110156100e757600080fd5b503561041d565b60408051858152908101839052811515606082015260806020808301828152865192840192909252855160a084019187019080838360005b8381101561013e578181015183820152602001610126565b50505050905090810190601f16801561016b5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b6100b56004803603602081101561019257600080fd5b50356104d3565b6100b5600480360360208110156101af57600080fd5b8101906020810181356401000000008111156101ca57600080fd5b8201836020820111156101dc57600080fd5b803590602001918460018302840111640100000000831117156101fe57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610520945050505050565b6100bf61059f565b61026d6004803603602081101561025d57600080fd5b50356001600160a01b03166105a5565b604080519115158252519081900360200190f35b6100bf6105ba565b6102916105c1565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102cb5781810151838201526020016102b3565b50505050905090810190601f1680156102f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3360009081526003602052604090205460ff1615610364576040805162461bcd60e51b8152602060048201526016602482015275566f7465722063616e277420766f746520747769636560501b604482015290519081900360640190fd5b60008111801561037657506002548111155b6103b15760405162461bcd60e51b815260040180806020018281038252602b8152602001806106e8602b913960400191505060405180910390fd5b336000908152600360209081526040808320805460ff1916600190811790915560048054820190558484529182905280832060020180549092019091555182917ffff3c900d938d21d0990d786e819f29b8d05c1ef587b462b939609625b684b1691a250565b60025481565b600160208181526000928352604092839020805481840180548651600296821615610100026000190190911695909504601f810185900485028601850190965285855290949193929091908301828280156104b95780601f1061048e576101008083540402835291602001916104b9565b820191906000526020600020905b81548152906001019060200180831161049c57829003601f168201915b50505050600283015460039093015491929160ff16905084565b6000818152600160208181526040808420600301805460ff1916909317909255815180830190925260068083526518db1bdcd95960d21b9290910191825261051c92919061064f565b5050565b6002805460019081019182905560408051608081018252838152602080820186815260008385018190526060840181905295865284825292909420815181559151805191949293610577939085019291019061064f565b50604082015160028201556060909101516003909101805460ff191691151591909117905550565b60045481565b60036020526000908152604090205460ff1681565b6002545b90565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106475780601f1061061c57610100808354040283529160200191610647565b820191906000526020600020905b81548152906001019060200180831161062a57829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061069057805160ff19168380011785556106bd565b828001600101855582156106bd579182015b828111156106bd5782518255916020019190600101906106a2565b506106c99291506106cd565b5090565b6105be91905b808211156106c957600081556001016106d356fe596f757220766f746520646f65736e2774206d6174636820776974636820616e792063616e646964617465a265627a7a72315820968f2bd19e3fb93b9ac12a1cfbdfd677b2a558caee48792b56ee43b2e1c18f7864736f6c634300050b0032'
    _proposals = list() 
  
        

    def __repr__(self):
        return "<Contract '{}' -> {}>".format(self.address, self.name)

    @property
    def registered_on(self):
        return self.registered_on

    @registered_on.setter
    def registered_on(self, _date):
        self.end_date = datetime.utcnow()

    def toJSON(self):
        return json.dumps(self, default=lambda o: o.__dict__, 
            sort_keys=True, indent=4)

# A specialised JSONEncoder that encodes User
# objects as JSON
class ContractEncoder(json.JSONEncoder):

    def default(self, obj):
        if isinstance(obj.__class__, DeclarativeMeta):
            # an SQLAlchemy class
            fields = {}
            for field in [x for x in dir(obj) if not x.startswith('_') and x != 'metadata' and ['abi', 'bytecode', 'proposal_names'] not in x ]:
                data = obj.__getattribute__(field)
                try:
                    json.dumps(data) or data # this will fail on non-encodable values, like other classes
                    fields[field] = data
                except TypeError:
                    fields[field] = None
            # a json-encodable dict
            return fields

        return json.JSONEncoder.default(self, obj)
